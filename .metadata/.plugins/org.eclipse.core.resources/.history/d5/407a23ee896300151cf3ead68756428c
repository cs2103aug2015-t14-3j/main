import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Map;

abstract class Logic {

	abstract public String welcomeMessage1();
	abstract public String welcomeMessage2();
	abstract public String toDoToday();
	abstract public String executeCommand(String command);
	abstract public boolean isFirstRun();
	abstract public void setUserName(String userName);

}

class TBLogic extends Logic {
	
	private String output;
	private Storage storage;
	private String userName;
//	private Parser parser;
	
	private final String WELCOME_MESSAGE1 = "Date: %s\nTime: %s\n--------------------\n";
	private final String WELCOME_MESSAGE2 = "Welcome back, %s!\n\n";
	private final String INVALID_COMMAND = "Invalid Command\n";
	
	public TBLogic() {
		output = new String();
//		parser = new Parser();
		storage = new Storage();
	}
	
	public boolean isFirstRun() {
		return storage.isFirstRun();
	}
	
	public void setUserName(String userName) {
		storage.setUserName(userName);
	}
	
	public String welcomeMessage2() {
		userName = storage.getUserName();
		output = String.format(WELCOME_MESSAGE2, userName);
		return output;
	}
	
	public String welcomeMessage1() {
		Date dateTime = new Date();
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd MMMM yyyy, EEEE");
		SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm:ss");
		
		String date = dateFormat.format(dateTime);
		String time = timeFormat.format(dateTime);
		
		output = String.format(WELCOME_MESSAGE1, date, time);
		return output;
	}
	
	public String toDoToday() {
		return "Nothing to do today :D";
	}
	
	public String executeCommand(String command) {
		Map<String, String> parsedCommand = parser.parseCommand(command);
		
		String commandType = parsedCommand.get("command");
		
		switch (commandType) {
		case "add":
			output = add(parsedCommand);
			return output;
		case "display":
			output = display(parsedCommand);
			return output;
		case "delete":
			output = delete(parsedCommand);
			return output;			
		case "edit":
			output = edit(parsedCommand);
			return output;
		case "search":
			output = search(parsedCommand);
			return output;
		case "undo":
			output = undo(parsedCommand);
			return output;
		case "help":
			output = help(parsedCommand);
			return output;
		case INVALID:
			output = INVALID_COMMAND;
			return output;
		}
	}
	
	private String add(Map<String, String> parsedCommand) {
		return " ";
	}
	
	private String display(Map<String, String> parsedCommand) {
		return " ";
	}
	
	private String delete(Map<String,String> parsedCommand) {
		return " ";
	}
	
	private String edit(Map<String, String> parsedCommand) {
		return " ";
	}
	
	private String search(Map<String, String> parsedCommand) {
		return " ";
	}
	
	private String undo(Map<String, String> parsedCommand) {
		return " ";
	}
	
	private String help(Map<String, String> parsedCommand) {
		return " ";
	}
	
}