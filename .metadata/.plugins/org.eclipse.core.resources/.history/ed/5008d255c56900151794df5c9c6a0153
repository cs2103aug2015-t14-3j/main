import java.util.Map;

public class Content {

	private static final int ARR_SIZE_EVENT = 3;
	private static final int ARR_SIZE_DEADLINES = 2;
	
	private static final String DICTIONARY_ADD_FIELD_START_DATE = "startDate";
	private static final String DICTIONARY_ADD_FIELD_END_DATE = "endDate";
	private static final String DICTIONARY_ADD_FIELD_DESCRIPTION = "description";
	
	private static final String ADD_KEYWORD_EVENT_START = "from";
	private static final String ADD_KEYWORD_EVENT_END = "to";
	private static final String ADD_KEYWORD_DEADLINE_END = "by";
	
	private static final String DELETE_KEYWORD = "index";
	
	private static final String DISPLAY_KEYWORD_SUB = "subCommand";
	private static final String DISPLAY_KEYWORD_COLOR = "color";
	private static final String DISPLAY_KEYWORD_ON_DATE = "on";
	private static final String DISPLAY_KEYWORD_FROM_DATE = "from";
	private static final String DISPLAY_KEYWORD_AFTER_DATE = "after";
	private static final String DISPLAY_KEYWORD_DUE_DATE = "due";
	private static final String DISPLAY_KEYWORD_INCOMPLETE = "incomplete";
	private static final String DISPLAY_KEYWORD_FLOATING = "floating";
	
	final String ERROR_COMMAND = "Invalid User Command.";
	String[] arr;
	String command;
	String remainingUserInput;
	
	public Content(String userInput, String command) {
		userInput = userInput.trim();
		this.command = command;
		
		if (command.equalsIgnoreCase("add") || command.equalsIgnoreCase("edit")) {
			arr = userInput.split("-");
		} else {
			remainingUserInput = userInput;
		}
	}
	
	public void extractContent(Map<String,String> dictionary) {
		switch (command) {
		case "add":
			extractAddContent(dictionary);
			break;
		case "delete":
			extractDeleteContent(dictionary);
			break;
		case "display":
			extractDisplayContent(dictionary);
			break;
		case "edit":
			extractEditContent(dictionary);
			break;
		case "search":
			extractSearchContent(dictionary);
			break;
		default:
			System.out.println(ERROR_COMMAND);
		}
	}
	
	private void extractAddContent(Map<String,String> dictionary) {
		// code
		/*if (userInput.contains("from")) {
			// code
			dictionary.put("description", userInput.substring(1,userInput.indexOf("from")));
			dictionary.put("startDate", 
					userInput.substring(userInput.indexOf("from")+5, userInput.indexOf("to")-1));
			dictionary.put("endDate", 
					userInput.substring(userInput.indexOf("to")+3, userInput.length()));
		} else if (userInput.contains("by")) {
			// code
			dictionary.put("description", userInput.substring(1,userInput.indexOf("by")));
			dictionary.put("endDate", userInput.substring(userInput.indexOf("by")+3,userInput.length()));
			dictionary.put("startDate", null);
		} else {
			dictionary.put("description",userInput.substring(1));
			dictionary.put("startDate", null);
			dictionary.put("endDate", null);
		}*/
		
		if(arr.length == ARR_SIZE_EVENT) {
			extractEventContent(dictionary);
		} else if (arr.length == ARR_SIZE_DEADLINES) {
			extractDeadlineContent(dictionary);
		} else {
			extractFloatingContent(dictionary);
		}
	}
	
	private void extractFloatingContent(Map<String, String> dictionary) {
		dictionary.put(DICTIONARY_ADD_FIELD_DESCRIPTION, arr[0]);
		dictionary.put(DICTIONARY_ADD_FIELD_START_DATE, null);
		dictionary.put(DICTIONARY_ADD_FIELD_END_DATE, null);
	}

	private void extractDeadlineContent(Map<String, String> dictionary) {
		for (int i=0; i < arr.length; i++) {
			if (arr[i].contains(ADD_KEYWORD_DEADLINE_END)) {
				String endDate = extractEndDate(arr[i]);
				dictionary.put(DICTIONARY_ADD_FIELD_END_DATE, endDate);
				dictionary.put(DICTIONARY_ADD_FIELD_START_DATE, null);
			} else {
				dictionary.put(DICTIONARY_ADD_FIELD_DESCRIPTION, arr[i]);
			}
		}
	}

	private void extractEventContent(Map<String, String> dictionary) {
		for (int i=0; i < arr.length; i++) {
			if (arr[i].contains(ADD_KEYWORD_EVENT_START)) {
				String startDate = extractStartDate(arr[i]);
				dictionary.put(DICTIONARY_ADD_FIELD_START_DATE, startDate);
			} else if (arr[i].contains(ADD_KEYWORD_EVENT_END)) {
				String endDate = extractEndDate(arr[i]);
				dictionary.put(DICTIONARY_ADD_FIELD_END_DATE, endDate);
			} else {
				dictionary.put(DICTIONARY_ADD_FIELD_DESCRIPTION,arr[i]);
			}
		}
	}

	private String extractStartDate(String str) {
		return str.replace(ADD_KEYWORD_EVENT_START, "").trim();
	}
	
	private String extractEndDate(String str) {
		return str.replace(ADD_KEYWORD_EVENT_END,"").trim();
	}
	
	private void extractDeleteContent(Map<String,String> dictionary) {
		dictionary.put(DELETE_KEYWORD, arr[0]);
	}
	
	private void extractDisplayContent(Map<String,String> dictionary) {
		
		arr = remainingUserInput.split(" ");
		
		/*if (whiteSpaceIndex == -1) {
			if (userInput.equals("incomplete")) {
				dictionary.put("subCommand", "incomplete");
			} else if (userInput.equals("floating")) {
				dictionary.put("subCommnad", "floating");
			} else if (userInput.equals("")) {
				dictionary.put("subCommand", null);
			} else {
				dictionary.put("subCommand", "color");
				dictionary.put("color", userInput);
			}
		} else {
			dictionary.put("subCommand", userInput.substring(0,whiteSpaceIndex));
			dictionary.put("date", userInput.substring(whiteSpaceIndex+1,userInput.length()));
		}	*/
		
		if (arr.length == 0) {
			dictionary.put(DISPLAY_KEYWORD_SUB, null);
		} else if (arr[0].equalsIgnoreCase(DISPLAY_KEYWORD_ON_DATE) || arr[0].equalsIgnoreCase(DISPLAY_KEYWORD_FROM_DATE) 
				|| arr[0].equalsIgnoreCase(DISPLAY_KEYWORD_AFTER_DATE) || arr[0].equalsIgnoreCase(DISPLAY_KEYWORD_DUE_DATE)
				|| arr[0].equalsIgnoreCase(DISPLAY_KEYWORD_INCOMPLETE) || arr[0].equalsIgnoreCase(DISPLAY_KEYWORD_FLOATING)) {
			dictionary.put(DISPLAY_KEYWORD_SUB, arr[0]);
		} else {
			dictionary.put(DISPLAY_KEYWORD_SUB, DISPLAY_KEYWORD_COLOR);
		}
	}
	
	private void extractEditContent(Map<String,String> dictionary) {
		for (int i=0; i < arr.length; i++) {
			if (arr[i].equalsIgnoreCase("description") || arr[i].equalsIgnoreCase("start date") || arr[i].equalsIgnoreCase("end date")) {
				dictionary.put("field", arr[i]);
			} else if (isNumeric(arr[i])) {
				dictionary.put("index", arr[i]);
			} else {
				dictionary.put("newValue", arr[i]);
			}
		}
	}
	
	public boolean isNumeric(String str) {  
	    return str.matches("[-+]?\\d*\\.?\\d+");  
	}  
	
	private void extractSearchContent(Map<String,String> dictionary) {
		dictionary.put("searchKey", remainingUserInput);
	}
}
