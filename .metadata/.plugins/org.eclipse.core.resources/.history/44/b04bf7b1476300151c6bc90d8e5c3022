import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

public class Parser {
	
	
	final String ERROR_COMMAND = "Invalid User Command.";
	
	Map<String, String> dictionary;
	String userInput;

	public Parser() {		
	}
	
	Map<String, String> getDictionary (String input) {
		dictionary = new HashMap<String,String>();
		userInput = input;
		extractCommand();
		return dictionary;
	}

	private void extractCommand() {
		if (userInput.contains("add")) {
			dictionary.put("command", "add");
		} else if (userInput.contains("delete")) {
			dictionary.put("command", "delete");
		} else if (userInput.contains("display on")) {
			dictionary.put("command", "display on");
		} else if (userInput.contains("display")) {
			dictionary.put("command", "display");
		} else if (userInput.contains("edit")) {
			dictionary.put("command", "edit");
		} else if (userInput.contains("search")) {
			dictionary.put("command", "search");
		} else if (userInput.contains("undo")) {
			dictionary.put("command", "undo");
		} else if (userInput.contains("help")) {
			dictionary.put("command", "help");
		} 
		System.out.println(ERROR_COMMAND);
	} 
	
	String[] getSortedContent(COMMAND_TYPE command) throws ParseException {	
		userInput.replace(command.toString(),"");
		String[] sortedInput = sortContents(command,userInput);
		return sortedInput;
	}
	
	String[] sortContents(COMMAND_TYPE command, String contents) throws ParseException {
		// sort
		Date date = formatDate("");
		
		String[] arr = contents.split(" ");
		
		return arr;
	}
	
	Date formatDate(String date) throws ParseException {
		SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
		Date dateFormatted = format.parse(date); 
		return dateFormatted;
	}

}
