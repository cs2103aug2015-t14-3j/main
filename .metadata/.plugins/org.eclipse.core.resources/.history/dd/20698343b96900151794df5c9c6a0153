import java.util.*;
import com.joestelmach.natty.*;

// Things to note: First word of userInput should be command
// command: add,insert,create,delete,remove,display,show,edit,search,undo,help

public class Parser {
	
	CommandMatch cmd;
	Content content;
	
	final String ERROR_COMMAND = "Invalid User Command.";
	String userInput;

	public Parser() {
	}
	
	Map<String, String> getDictionary (String input) {
		Map<String, String> dictionary = new HashMap<String,String>();
		userInput = input;
		
		cmd = new CommandMatch(userInput);
		command = cmd.extractCommand(dictionary);
		
		String command = extractCommand(dictionary);
		removeCommand(command);
		extractContent(command, dictionary);
		return dictionary;
	}

	private String extractCommand(Map<String,String> dictionary) {
		String command = "";
		if (userInput.startsWith("add") || userInput.startsWith("create") || userInput.startsWith("insert")) {
			command = "add";
			dictionary.put("command", "add");
		} else if (userInput.startsWith("delete") || userInput.startsWith("remove")) {
			command = "delete";
			dictionary.put("command", "delete");
		} else if (userInput.startsWith("display") || userInput.startsWith("show")) {
			command = "display";
			dictionary.put("command", "display");
		} else if (userInput.startsWith("edit")) {
			command = "edit";
			dictionary.put("command", "edit");
		} else if (userInput.startsWith("search") || userInput.startsWith("look for")) {
			command = "search";
			dictionary.put("command", "search");
		} else if (userInput.startsWith("undo")) {
			command = "undo";
			dictionary.put("command", "undo");
		} else if (userInput.startsWith("help")) {
			command = "help";
			dictionary.put("command", "help");
		} 
		return command;
	} 
	
	public void removeCommand(String command) {
		userInput = userInput.replace(command, "").trim();
	}
	
	public void extractContent(String command, Map<String,String> dictionary) {
		switch (command) {
		case "add":
			extractAddContent(dictionary);
			break;
		case "delete":
			extractDeleteContent(dictionary);
			break;
		case "display":
			extractDisplayContent(dictionary);
			break;
		case "edit":
			extractEditContent(dictionary);
			break;
		case "search":
			extractSearchContent(dictionary);
			break;
		default:
			System.out.println(ERROR_COMMAND);
		}
	}
	
	private void extractAddContent(Map<String,String> dictionary) {
		// code
		if (userInput.contains("from")) {
			// code
			dictionary.put("description", userInput.substring(1,userInput.indexOf("from")));
			dictionary.put("startDate", 
					userInput.substring(userInput.indexOf("from")+5, userInput.indexOf("to")-1));
			dictionary.put("endDate", 
					userInput.substring(userInput.indexOf("to")+3, userInput.length()));
		} else if (userInput.contains("by")) {
			// code
			dictionary.put("description", userInput.substring(1,userInput.indexOf("by")));
			dictionary.put("endDate", userInput.substring(userInput.indexOf("by")+3,userInput.length()));
			dictionary.put("startDate", null);
		} else {
			dictionary.put("description",userInput.substring(1));
			dictionary.put("startDate", null);
			dictionary.put("endDate", null);
		}
	}
	
	private void extractDeleteContent(Map<String,String> dictionary) {
		dictionary.put("index", userInput.substring(1));
	}
	
	private void extractDisplayContent(Map<String,String> dictionary) {
		
		int whiteSpaceIndex = userInput.indexOf(" ");
		
		if (whiteSpaceIndex == -1) {
			if (userInput.equals("incomplete")) {
				dictionary.put("subCommand", "incomplete");
			} else if (userInput.equals("floating")) {
				dictionary.put("subCommnad", "floating");
			} else if (userInput.equals("")) {
				dictionary.put("subCommand", null);
			} else {
				dictionary.put("subCommand", "color");
				dictionary.put("color", userInput);
			}
		} else {
			dictionary.put("subCommand", userInput.substring(0,whiteSpaceIndex));
			dictionary.put("date", userInput.substring(whiteSpaceIndex+1,userInput.length()));
		}	
	}
	
	private void extractEditContent(Map<String,String> dictionary) {
		
		int whiteSpaceIndex = userInput.indexOf(" ");
		
		dictionary.put("field", userInput.substring(0,whiteSpaceIndex));
		dictionary.put("newValue", 
				userInput.substring(whiteSpaceIndex+1,userInput.length()));
	}
	
	private void extractSearchContent(Map<String,String> dictionary) {
		dictionary.put("searchKey", userInput.substring(1));
	}
}
